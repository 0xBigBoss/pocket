// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/p2p/p2p_types/network.go

// Package mock_p2p_types is a generated GoMock package.
package mock_p2p_types

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	p2p_types "pocket/consensus/pkg/p2p/p2p_types"
	types "pocket/consensus/pkg/types"
)

// MockNetwork is a mock of Network interface.
type MockNetwork struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkMockRecorder
}

// MockNetworkMockRecorder is the mock recorder for MockNetwork.
type MockNetworkMockRecorder struct {
	mock *MockNetwork
}

// NewMockNetwork creates a new mock instance.
func NewMockNetwork(ctrl *gomock.Controller) *MockNetwork {
	mock := &MockNetwork{ctrl: ctrl}
	mock.recorder = &MockNetworkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetwork) EXPECT() *MockNetworkMockRecorder {
	return m.recorder
}

// ConnectToValidator mocks base method.
func (m *MockNetwork) ConnectToValidator(nodeId types.NodeId, v *types.Validator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectToValidator", nodeId, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConnectToValidator indicates an expected call of ConnectToValidator.
func (mr *MockNetworkMockRecorder) ConnectToValidator(nodeId, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectToValidator", reflect.TypeOf((*MockNetwork)(nil).ConnectToValidator), nodeId, v)
}

// GetAddrBook mocks base method.
func (m *MockNetwork) GetAddrBook() []*p2p_types.NetworkPeer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddrBook")
	ret0, _ := ret[0].([]*p2p_types.NetworkPeer)
	return ret0
}

// GetAddrBook indicates an expected call of GetAddrBook.
func (mr *MockNetworkMockRecorder) GetAddrBook() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddrBook", reflect.TypeOf((*MockNetwork)(nil).GetAddrBook))
}

// NetworkBroadcast mocks base method.
func (m *MockNetwork) NetworkBroadcast(data []byte, self types.NodeId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkBroadcast", data, self)
	ret0, _ := ret[0].(error)
	return ret0
}

// NetworkBroadcast indicates an expected call of NetworkBroadcast.
func (mr *MockNetworkMockRecorder) NetworkBroadcast(data, self interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkBroadcast", reflect.TypeOf((*MockNetwork)(nil).NetworkBroadcast), data, self)
}

// NetworkSend mocks base method.
func (m *MockNetwork) NetworkSend(data []byte, node types.NodeId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkSend", data, node)
	ret0, _ := ret[0].(error)
	return ret0
}

// NetworkSend indicates an expected call of NetworkSend.
func (mr *MockNetworkMockRecorder) NetworkSend(data, node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkSend", reflect.TypeOf((*MockNetwork)(nil).NetworkSend), data, node)
}
