// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/shared/modules/consensus_module.go

// Package mock_modules is a generated GoMock package.
package mock_modules

import (
	net "net"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "pocket/consensus/pkg/consensus/types"
	context "pocket/shared/context"
	modules "pocket/shared/modules"
)

// MockConsensusModule is a mock of ConsensusModule interface.
type MockConsensusModule struct {
	ctrl     *gomock.Controller
	recorder *MockConsensusModuleMockRecorder
}

// MockConsensusModuleMockRecorder is the mock recorder for MockConsensusModule.
type MockConsensusModuleMockRecorder struct {
	mock *MockConsensusModule
}

// NewMockConsensusModule creates a new mock instance.
func NewMockConsensusModule(ctrl *gomock.Controller) *MockConsensusModule {
	mock := &MockConsensusModule{ctrl: ctrl}
	mock.recorder = &MockConsensusModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsensusModule) EXPECT() *MockConsensusModuleMockRecorder {
	return m.recorder
}

// GetNodeState mocks base method.
func (m *MockConsensusModule) GetNodeState() types.ConsensusNodeState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeState")
	ret0, _ := ret[0].(types.ConsensusNodeState)
	return ret0
}

// GetNodeState indicates an expected call of GetNodeState.
func (mr *MockConsensusModuleMockRecorder) GetNodeState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeState", reflect.TypeOf((*MockConsensusModule)(nil).GetNodeState))
}

// GetPocketBusMod mocks base method.
func (m *MockConsensusModule) GetPocketBusMod() modules.PocketBusModule {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPocketBusMod")
	ret0, _ := ret[0].(modules.PocketBusModule)
	return ret0
}

// GetPocketBusMod indicates an expected call of GetPocketBusMod.
func (mr *MockConsensusModuleMockRecorder) GetPocketBusMod() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPocketBusMod", reflect.TypeOf((*MockConsensusModule)(nil).GetPocketBusMod))
}

// HandleEvidence mocks base method.
func (m *MockConsensusModule) HandleEvidence(arg0 *context.PocketContext, arg1 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleEvidence", arg0, arg1)
}

// HandleEvidence indicates an expected call of HandleEvidence.
func (mr *MockConsensusModuleMockRecorder) HandleEvidence(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleEvidence", reflect.TypeOf((*MockConsensusModule)(nil).HandleEvidence), arg0, arg1)
}

// HandleMessage mocks base method.
func (m *MockConsensusModule) HandleMessage(arg0 *context.PocketContext, arg1 *types.ConsensusMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleMessage", arg0, arg1)
}

// HandleMessage indicates an expected call of HandleMessage.
func (mr *MockConsensusModuleMockRecorder) HandleMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleMessage", reflect.TypeOf((*MockConsensusModule)(nil).HandleMessage), arg0, arg1)
}

// HandleTelemetryMessage mocks base method.
func (m *MockConsensusModule) HandleTelemetryMessage(arg0 *context.PocketContext, arg1 net.Conn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleTelemetryMessage", arg0, arg1)
}

// HandleTelemetryMessage indicates an expected call of HandleTelemetryMessage.
func (mr *MockConsensusModuleMockRecorder) HandleTelemetryMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleTelemetryMessage", reflect.TypeOf((*MockConsensusModule)(nil).HandleTelemetryMessage), arg0, arg1)
}

// HandleTransaction mocks base method.
func (m *MockConsensusModule) HandleTransaction(arg0 *context.PocketContext, arg1 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleTransaction", arg0, arg1)
}

// HandleTransaction indicates an expected call of HandleTransaction.
func (mr *MockConsensusModuleMockRecorder) HandleTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleTransaction", reflect.TypeOf((*MockConsensusModule)(nil).HandleTransaction), arg0, arg1)
}

// SetPocketBusMod mocks base method.
func (m *MockConsensusModule) SetPocketBusMod(arg0 modules.PocketBusModule) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPocketBusMod", arg0)
}

// SetPocketBusMod indicates an expected call of SetPocketBusMod.
func (mr *MockConsensusModuleMockRecorder) SetPocketBusMod(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPocketBusMod", reflect.TypeOf((*MockConsensusModule)(nil).SetPocketBusMod), arg0)
}

// Start mocks base method.
func (m *MockConsensusModule) Start(arg0 *context.PocketContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockConsensusModuleMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockConsensusModule)(nil).Start), arg0)
}

// Stop mocks base method.
func (m *MockConsensusModule) Stop(arg0 *context.PocketContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockConsensusModuleMockRecorder) Stop(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockConsensusModule)(nil).Stop), arg0)
}
