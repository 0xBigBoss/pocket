// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/shared/modules/pocket_module.go

// Package mock_modules is a generated GoMock package.
package mock_modules

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "pocket/shared/context"
	modules "pocket/shared/modules"
)

// MockPocketModule is a mock of PocketModule interface.
type MockPocketModule struct {
	ctrl     *gomock.Controller
	recorder *MockPocketModuleMockRecorder
}

// MockPocketModuleMockRecorder is the mock recorder for MockPocketModule.
type MockPocketModuleMockRecorder struct {
	mock *MockPocketModule
}

// NewMockPocketModule creates a new mock instance.
func NewMockPocketModule(ctrl *gomock.Controller) *MockPocketModule {
	mock := &MockPocketModule{ctrl: ctrl}
	mock.recorder = &MockPocketModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPocketModule) EXPECT() *MockPocketModuleMockRecorder {
	return m.recorder
}

// GetPocketBusMod mocks base method.
func (m *MockPocketModule) GetPocketBusMod() modules.PocketBusModule {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPocketBusMod")
	ret0, _ := ret[0].(modules.PocketBusModule)
	return ret0
}

// GetPocketBusMod indicates an expected call of GetPocketBusMod.
func (mr *MockPocketModuleMockRecorder) GetPocketBusMod() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPocketBusMod", reflect.TypeOf((*MockPocketModule)(nil).GetPocketBusMod))
}

// SetPocketBusMod mocks base method.
func (m *MockPocketModule) SetPocketBusMod(arg0 modules.PocketBusModule) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPocketBusMod", arg0)
}

// SetPocketBusMod indicates an expected call of SetPocketBusMod.
func (mr *MockPocketModuleMockRecorder) SetPocketBusMod(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPocketBusMod", reflect.TypeOf((*MockPocketModule)(nil).SetPocketBusMod), arg0)
}

// Start mocks base method.
func (m *MockPocketModule) Start(arg0 *context.PocketContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockPocketModuleMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockPocketModule)(nil).Start), arg0)
}

// Stop mocks base method.
func (m *MockPocketModule) Stop(arg0 *context.PocketContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockPocketModuleMockRecorder) Stop(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockPocketModule)(nil).Stop), arg0)
}
