// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/shared/modules/p2p_module.go

// Package mock_modules is a generated GoMock package.
package mock_modules

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	p2p_types "pocket/consensus/pkg/p2p/p2p_types"
	context "pocket/shared/context"
	modules "pocket/shared/modules"
	types "pocket/consensus/pkg/types"
)

// MockNetworkModule is a mock of NetworkModule interface.
type MockNetworkModule struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkModuleMockRecorder
}

// MockNetworkModuleMockRecorder is the mock recorder for MockNetworkModule.
type MockNetworkModuleMockRecorder struct {
	mock *MockNetworkModule
}

// NewMockNetworkModule creates a new mock instance.
func NewMockNetworkModule(ctrl *gomock.Controller) *MockNetworkModule {
	mock := &MockNetworkModule{ctrl: ctrl}
	mock.recorder = &MockNetworkModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkModule) EXPECT() *MockNetworkModuleMockRecorder {
	return m.recorder
}

// Broadcast mocks base method.
func (m *MockNetworkModule) Broadcast(arg0 *context.PocketContext, arg1 *p2p_types.NetworkMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Broadcast", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Broadcast indicates an expected call of Broadcast.
func (mr *MockNetworkModuleMockRecorder) Broadcast(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*MockNetworkModule)(nil).Broadcast), arg0, arg1)
}

// GetNetwork mocks base method.
func (m *MockNetworkModule) GetNetwork() p2p_types.Network {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetwork")
	ret0, _ := ret[0].(p2p_types.Network)
	return ret0
}

// GetNetwork indicates an expected call of GetNetwork.
func (mr *MockNetworkModuleMockRecorder) GetNetwork() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetwork", reflect.TypeOf((*MockNetworkModule)(nil).GetNetwork))
}

// GetPocketBusMod mocks base method.
func (m *MockNetworkModule) GetPocketBusMod() modules.PocketBusModule {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPocketBusMod")
	ret0, _ := ret[0].(modules.PocketBusModule)
	return ret0
}

// GetPocketBusMod indicates an expected call of GetPocketBusMod.
func (mr *MockNetworkModuleMockRecorder) GetPocketBusMod() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPocketBusMod", reflect.TypeOf((*MockNetworkModule)(nil).GetPocketBusMod))
}

// Send mocks base method.
func (m *MockNetworkModule) Send(arg0 *context.PocketContext, arg1 *p2p_types.NetworkMessage, arg2 types.NodeId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockNetworkModuleMockRecorder) Send(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockNetworkModule)(nil).Send), arg0, arg1, arg2)
}

// SetPocketBusMod mocks base method.
func (m *MockNetworkModule) SetPocketBusMod(arg0 modules.PocketBusModule) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPocketBusMod", arg0)
}

// SetPocketBusMod indicates an expected call of SetPocketBusMod.
func (mr *MockNetworkModuleMockRecorder) SetPocketBusMod(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPocketBusMod", reflect.TypeOf((*MockNetworkModule)(nil).SetPocketBusMod), arg0)
}

// Start mocks base method.
func (m *MockNetworkModule) Start(arg0 *context.PocketContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockNetworkModuleMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockNetworkModule)(nil).Start), arg0)
}

// Stop mocks base method.
func (m *MockNetworkModule) Stop(arg0 *context.PocketContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockNetworkModuleMockRecorder) Stop(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockNetworkModule)(nil).Stop), arg0)
}
