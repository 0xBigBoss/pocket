// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/shared/modules/persistence_module.go

// Package mock_modules is a generated GoMock package.
package mock_modules

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "pocket/shared/context"
	modules "pocket/shared/modules"
)

// MockpersistenceModule is a mock of persistenceModule interface.
type MockpersistenceModule struct {
	ctrl     *gomock.Controller
	recorder *MockpersistenceModuleMockRecorder
}

// MockpersistenceModuleMockRecorder is the mock recorder for MockpersistenceModule.
type MockpersistenceModuleMockRecorder struct {
	mock *MockpersistenceModule
}

// NewMockpersistenceModule creates a new mock instance.
func NewMockpersistenceModule(ctrl *gomock.Controller) *MockpersistenceModule {
	mock := &MockpersistenceModule{ctrl: ctrl}
	mock.recorder = &MockpersistenceModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpersistenceModule) EXPECT() *MockpersistenceModuleMockRecorder {
	return m.recorder
}

// GetBlockHash mocks base method.
func (m *MockpersistenceModule) GetBlockHash(height uint64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockHash", height)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockHash indicates an expected call of GetBlockHash.
func (mr *MockpersistenceModuleMockRecorder) GetBlockHash(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHash", reflect.TypeOf((*MockpersistenceModule)(nil).GetBlockHash), height)
}

// GetLatestBlockHeight mocks base method.
func (m *MockpersistenceModule) GetLatestBlockHeight() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestBlockHeight")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestBlockHeight indicates an expected call of GetLatestBlockHeight.
func (mr *MockpersistenceModuleMockRecorder) GetLatestBlockHeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestBlockHeight", reflect.TypeOf((*MockpersistenceModule)(nil).GetLatestBlockHeight))
}

// GetPocketBusMod mocks base method.
func (m *MockpersistenceModule) GetPocketBusMod() modules.PocketBusModule {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPocketBusMod")
	ret0, _ := ret[0].(modules.PocketBusModule)
	return ret0
}

// GetPocketBusMod indicates an expected call of GetPocketBusMod.
func (mr *MockpersistenceModuleMockRecorder) GetPocketBusMod() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPocketBusMod", reflect.TypeOf((*MockpersistenceModule)(nil).GetPocketBusMod))
}

// SetPocketBusMod mocks base method.
func (m *MockpersistenceModule) SetPocketBusMod(arg0 modules.PocketBusModule) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPocketBusMod", arg0)
}

// SetPocketBusMod indicates an expected call of SetPocketBusMod.
func (mr *MockpersistenceModuleMockRecorder) SetPocketBusMod(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPocketBusMod", reflect.TypeOf((*MockpersistenceModule)(nil).SetPocketBusMod), arg0)
}

// Start mocks base method.
func (m *MockpersistenceModule) Start(arg0 *context.PocketContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockpersistenceModuleMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockpersistenceModule)(nil).Start), arg0)
}

// Stop mocks base method.
func (m *MockpersistenceModule) Stop(arg0 *context.PocketContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockpersistenceModuleMockRecorder) Stop(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockpersistenceModule)(nil).Stop), arg0)
}
